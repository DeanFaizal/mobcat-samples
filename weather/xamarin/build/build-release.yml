variables:
    BuildConfiguration: Debug
    NugetToolVersion: 5.4.0
    DotNetVersion: 3.1.x
    MonoVersion: 6_8_0
    xcodeRoot: /Applications/Xcode_11.2.1.app
    androidDevices: 9f06dbb6
    iOSDevices: 212a1716
    # UITestToolsDirectory: /Users/vsts/.nuget/packages/xamarin.uitest/3.0.6/tools
    UITestToolsDirectory: $(System.DefaultWorkingDirectory)/packages/xamarin.uitest/3.0.7/tools
    AppCenteriOSSlug: 'Mobile-Customer-Advisory-Team/Weather.iOS-dev'
    AppCenterDroidSlug: 'Mobile-Customer-Advisory-Team/Weather.Android-dev'


stages:
- stage: BuildXamarinFormsApps
  jobs:
  - job: BuildWeatherAndroid
    displayName: Build Weather Xamarin.Forms.Android App
    pool:
      name: Hosted macOS
      vmImage: 'macOS-latest'
      demands:
      - MSBuild
      - Xamarin.Android
      
    steps:
    - task: Bash@3
      displayName: 'Set Mono Version 6.8.0'
      inputs:
        targetType: 'inline'
        script: 'sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(MonoVersion)'

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: $(DotNetVersion)

    - task: Bash@3
      displayName: 'Add AppCenter Secrets'
      inputs:
        targetType: 'inline'
        script: |
          # Check WeatherServiceApiKey exists
                      # Check WeatherServiceUrl exists
                      # Check AndroidAppCenterSecret exists
                      # Check iOSAppCenterSecret exists
                      
                      if [ ! -n $(WeatherServiceApiKey) ]
                      then
                          echo "You need define the WeatherServiceApiKey variable in VSTS"
                          exit
                      fi
                      
                      if [ ! -n $(WeatherServiceUrl) ]
                      then
                          echo "You need define the WeatherServiceUrl variable in VSTS"
                          exit
                      fi
                      
                      if [ ! -n $(AndroidAppCenterSecret) ]
                      then
                          echo "You need define the AndroidAppCenterSecret variable in VSTS"
                          exit
                      fi
                      
                      if [ ! -n $(iOSAppCenterSecret) ]
                      then
                          echo "You need define the iOSAppCenterSecret variable in VSTS"
                          exit
                      fi
                      
                      APP_CONSTANT_FILE=weather/xamarin/Weather/ServiceConfig.cs
                      
                      if [ -e "$APP_CONSTANT_FILE" ]
                      then
                          echo "Updating App Secret Values to WeatherServiceApiKey in ServiceConfig.cs"
                          sed -i '' 's#WeatherServiceApiKey = "[a-z:./\\_]*"#WeatherServiceApiKey = "$(WeatherServiceApiKey)"#' $APP_CONSTANT_FILE
                      
                        echo "Updating App Secret Values to WeatherServiceUrl in ServiceConfig.cs"
                          sed -i '' 's#WeatherServiceUrl = "[a-z:./\\_]*"#WeatherServiceUrl = "$(WeatherServiceUrl)"#' $APP_CONSTANT_FILE
                      
                        echo "Updating App Secret Values to AndroidAppCenterSecret in ServiceConfig.cs"
                          sed -i '' 's#AndroidAppCenterSecret = "[a-z:./\\_]*"#AndroidAppCenterSecret = "$(AndroidAppCenterSecret)"#' $APP_CONSTANT_FILE
                      
                        echo "Updating App Secret Values to iOSAppCenterSecret in ServiceConfig.cs"
                          sed -i '' 's#iOSAppCenterSecret = "[a-z:./\\_]*"#iOSAppCenterSecret = "$(iOSAppCenterSecret)"#' $APP_CONSTANT_FILE
                      
                          echo "File content:"
                          cat $APP_CONSTANT_FILE
                      fi

    - task: NuGetToolInstaller@1
      displayName: Use Nuget $(NugetToolVersion)
      inputs:
        versionSpec: $(NugetToolVersion)

    - task: NuGetCommand@2
      inputs:
        restoreSolution: weather/xamarin/Weather.sln
        feedsToUse: config
        nugetConfigPath: weather/xamarin/build/nuget.config
        externalFeedCredentials: GitHubPackageRelease

    - script: echo Build Weather Xamarin.Forms.Android!

    - task: XamarinAndroid@1
      displayName: 'Build Weather Xamarin.Forms.Android App'
      inputs:
        projectFile: weather/xamarin/Weather.Android/Weather.Android.csproj #yaml runs from root folder of repo
        configuration: '$(BuildConfigurationAndroid)'
        createAppPackage: true

    - task: CopyFiles@2
      inputs:
        Contents: 'weather/xamarin/Weather.Android/bin/$(BuildConfiguration)/*.apk'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop_droid'
        publishLocation: 'Container'

  - job: BuildWeatheriOS
    displayName: Build Weather Xamarin.Forms.iOS App
    pool:
      name: Hosted macOS
      vmImage: 'macOS-latest'
      demands:
      - MSBuild
      - Xamarin.iOS
      - xcode

    steps:
    - task: Bash@3
      displayName: 'Set Mono Version 6.8.0'
      inputs:
        targetType: 'inline'
        script: 'sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(MonoVersion)'

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: $(DotNetVersion)
    
    - task: Bash@3
      displayName: 'Add AppCenter Secrets'
      inputs:
        targetType: 'inline'
        script: |
          # Check WeatherServiceApiKey exists
                      # Check WeatherServiceUrl exists
                      # Check AndroidAppCenterSecret exists
                      # Check iOSAppCenterSecret exists
                      
                      if [ ! -n $(WeatherServiceApiKey) ]
                      then
                          echo "You need define the WeatherServiceApiKey variable in VSTS"
                          exit
                      fi
                      
                      if [ ! -n $(WeatherServiceUrl) ]
                      then
                          echo "You need define the WeatherServiceUrl variable in VSTS"
                          exit
                      fi
                      
                      if [ ! -n $(AndroidAppCenterSecret) ]
                      then
                          echo "You need define the AndroidAppCenterSecret variable in VSTS"
                          exit
                      fi
                      
                      if [ ! -n $(iOSAppCenterSecret) ]
                      then
                          echo "You need define the iOSAppCenterSecret variable in VSTS"
                          exit
                      fi
                      
                      APP_CONSTANT_FILE=weather/xamarin/Weather/ServiceConfig.cs
                      
                      if [ -e "$APP_CONSTANT_FILE" ]
                      then
                          echo "Updating App Secret Values to WeatherServiceApiKey in ServiceConfig.cs"
                          sed -i '' 's#WeatherServiceApiKey = "[a-z:./\\_]*"#WeatherServiceApiKey = "$(WeatherServiceApiKey)"#' $APP_CONSTANT_FILE
                      
                        echo "Updating App Secret Values to WeatherServiceUrl in ServiceConfig.cs"
                          sed -i '' 's#WeatherServiceUrl = "[a-z:./\\_]*"#WeatherServiceUrl = "$(WeatherServiceUrl)"#' $APP_CONSTANT_FILE
                      
                        echo "Updating App Secret Values to AndroidAppCenterSecret in ServiceConfig.cs"
                          sed -i '' 's#AndroidAppCenterSecret = "[a-z:./\\_]*"#AndroidAppCenterSecret = "$(AndroidAppCenterSecret)"#' $APP_CONSTANT_FILE
                      
                        echo "Updating App Secret Values to iOSAppCenterSecret in ServiceConfig.cs"
                          sed -i '' 's#iOSAppCenterSecret = "[a-z:./\\_]*"#iOSAppCenterSecret = "$(iOSAppCenterSecret)"#' $APP_CONSTANT_FILE
                      
                          echo "File content:"
                          cat $APP_CONSTANT_FILE
                      fi
          
    - task: NuGetToolInstaller@1
      displayName: Use Nuget $(NugetToolVersion)
      inputs:
        versionSpec: $(NugetToolVersion)

    - task: NuGetCommand@2
      inputs:
        restoreSolution: weather/xamarin/Weather.sln
        feedsToUse: config
        nugetConfigPath: weather/xamarin/build/nuget.config
        externalFeedCredentials: GitHubPackageRelease

    - task: InstallAppleProvisioningProfile@1
      inputs:
        provisioningProfileLocation: 'secureFiles'
        provProfileSecureFile: 'VS_WildCard_Development.mobileprovision'

    - task: InstallAppleCertificate@2
      inputs:
        certSecureFile: 'Sweek_Dev_Cert.p12'
        certPwd: '$(CertPassword)'
        keychain: 'temp'

    - script: echo Build Weather Xamarin.Forms.iOS!
        
    - task: MSBuild@1
      displayName: 'Build  Weather Xamarin.Forms.iOS App'
      inputs:
        solution: weather/xamarin/Weather.sln #yaml runs from root folder of repo
        platform: iPhone
        configuration: '$(BuildConfigurationiOS)'

    - task: CopyFiles@2
      inputs:
        Contents: 'weather/xamarin/Weather.iOS/bin/iPhone/Debug/*.ipa'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop_ios'
        publishLocation: 'Container'
  
- stage: UploadtoTestCloud
  jobs: 
  - job: UploadtoTestCloud
    displayName: Upload to Test Cloud
    pool:
      name: Hosted macOS
      vmImage: 'macOS-latest'
      demands:
      - xcode
      - Xamarin.iOS
      - msbuild

    steps:
    - script: echo Upload to Test Cloud!

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Pipeline.Workspace)/drop_droid'
        Contents: '**'
        TargetFolder: '$(Build.SourcesDirectory)'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Pipeline.Workspace)/drop_ios'
        Contents: '**'
        TargetFolder: '$(Build.SourcesDirectory)'

    - task: Bash@3
      displayName: 'Set Mono Version 6.8.0'
      inputs:
        targetType: 'inline'
        script: 'sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(MonoVersion)'

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: $(DotNetVersion)

    - task: NuGetToolInstaller@1
      displayName: Use Nuget $(NugetToolVersion)
      inputs:
        versionSpec: $(NugetToolVersion)

    - task: NuGetCommand@2
      inputs:
        restoreSolution: weather/xamarin/Weather.sln
        feedsToUse: config
        nugetConfigPath: weather/xamarin/build/nuget.config
        externalFeedCredentials: GitHubPackageRelease

    - task: MSBuild@1
      displayName: Build UITests
      inputs:
        solution: 'weather/xamarin/Weather.UITests/Weather.UITests.csproj'
        configuration: '$(BuildConfigurationiOS)'

    - task: AppCenterTest@1
      displayName: Upload Weather Android
      inputs:
        appFile: '$(Build.SourcesDirectory)/weather/xamarin/Weather.Android/bin/$(BuildConfiguration)/*.apk'
        artifactsDirectory: '$(Build.ArtifactStagingDirectory)/AppCenterTest'
        frameworkOption: 'uitest'
        uiTestBuildDirectory: 'weather/xamarin/Weather.UITests/bin/$(BuildConfigurationiOS)'
        uiTestToolsDirectory: '$(UITestToolsDirectory)'
        credentialsOption: 'serviceEndpoint'
        serverEndpoint: 'App Center'
        appSlug: '$(AppCenterDroidSlug)'
        devices: '$(androidDevices)'
        localeOption: 'en_US'
        runOptions: '--test-output-dir $(Build.ArtifactStagingDirectory)/AppCenterTestResult'
        
    - task: AppCenterTest@1
      displayName: Upload Weather iOS
      inputs:
        appFile: '$(Build.SourcesDirectory)/weather/xamarin/Weather.iOS/bin/iPhone/Debug/*.ipa'
        artifactsDirectory: '$(Build.ArtifactStagingDirectory)/AppCenterTest'
        frameworkOption: 'uitest'
        uiTestBuildDirectory: 'weather/xamarin/Weather.UITests/bin/$(BuildConfigurationiOS)'
        uiTestToolsDirectory: '$(UITestToolsDirectory)'
        credentialsOption: 'serviceEndpoint'
        serverEndpoint: 'App Center'
        appSlug: '$(AppCenteriOSSlug)'
        devices: '$(iOSDevices)'
        localeOption: 'en_US'
        runOptions: '--test-output-dir $(Build.ArtifactStagingDirectory)/AppCenterTestResult'
